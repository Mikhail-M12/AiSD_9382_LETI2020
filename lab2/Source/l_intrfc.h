//// Created by niki_ on 29.10.2020.//#ifndef UNTITLED1_L_INTRFC_H#define UNTITLED1_L_INTRFC_Hnamespace h_list{    typedef char base; // базовый тип элементов (атомов)    struct s_expr;    struct two_ptr    {        s_expr *hd;//Указатель на голову        s_expr *tl;// Указатель на хвост    } ; //end two_ptr;    struct s_expr {        bool tag; // true: atom, false: pair        union        {            base atom; //элемент списка            two_ptr pair;//Указатели на голову и хвост        } node; //end union node    }; //end s_expr    typedef s_expr *lisp;// базовые функции:    lisp head (const lisp s);//Возвращет голову узла    lisp tail (const lisp s);//Возвращет хвост узла    lisp cons (const lisp h, const lisp t); // Конструктор для связывания списка    lisp make_atom (const base x);//создает новый элемент    bool isAtom (const lisp s);//проверяет узел на то атом он или нет    bool isNull (const lisp s);// проверяет нулевой ли node    void destroy (lisp s);//очищает память    base getAtom (const lisp s);//Возвращает атом переданного узла// функции ввода:    void read_lisp ( lisp& y); // основная функция для считывания    void read_s_expr (base prev, lisp& y);    void read_seq ( lisp& y);// функции вывода:    void write_lisp (const lisp x); // основная функция для вывода на экран    void write_seq (const lisp x);    void print(const char *message);//выводит глубину рекурсии    void print(const char *message, char z);//выводит глубину рекурсии c каким-то параметром    lisp copy_lisp (const lisp x);// копирует список и возврощает его    int getCount ();//дает доступ к количеству атомов.} // end of namespace h_list#endif //UNTITLED1_L_INTRFC_H